@using System.Text.Json

<div class="TranslationsManagerView">
    <div class="Toolbar">
        <ExtAutocomplete
            AvailableOptions="AvailableCultureNames"
            SelectedOptions="@(SelectedReferenceCulture != null ? [SelectedReferenceCulture] : [])"
            SelectedOptionsChanged="SetSelectedReferenceCulture"
            MaximumSelectedOptions="1"
            Placeholder="Ref. lang"
            Width="150px"
        />
        
        <ExtAutocomplete
            AvailableOptions="AvailableCultureNames"
            SelectedOptions="@SelectedCultureNames"
            SelectedOptionsChanged="SelectedCulturesChanged"
            OptionDisabled="IsCultureSelectedAsReferenceCulture"
            Disabled="@(SelectedReferenceCulture == null)"
            Placeholder="Other languages"
        />
        
        <FluentTextField
            Style="width: 250px;"
            Name="Search"
            Placeholder="Search (resource, name, values)"
            @bind-Value="@Search"
        />
        
        <FluentButton 
            Appearance="Appearance.Accent" 
            IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
            OnClick="@LoadDataAsync"
        >
            Load Data
        </FluentButton>
        
            
        <FluentButton
            Style="margin-left: 24px;"
            Appearance="Appearance.Accent" 
            IconStart="@(new Icons.Regular.Size20.SaveSync())"
            Type="ButtonType.Button"
            OnClick="SaveDataAsync"
        >
            Save changes (@DirtyItemsCount)
        </FluentButton>
    </div>

    <div class="Data">
        <FluentDataGrid ItemSize="45" Virtualize="true" Items="@QueryableTranslations" ShowHover="true" TGridItem="TranslationItem">
            <SelectColumn TGridItem="TranslationItem" SelectMode="DataGridSelectMode.Multiple" SelectFromEntireRow="false" @bind-SelectedItems="@SelectedTranslations" />

            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.Id))" Width="100px" Property="@(p => p.Id)" Title="ID">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.Id))
                </ColumnOptions>    
            </PropertyColumn>

            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.ResourceName))" Sortable="true" Width="150px" Property="@(p => p.ResourceName)">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.ResourceName))
                </ColumnOptions>    
            </PropertyColumn>
            
            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.Name))" Sortable="true" Width="150px" Property="@(p => p.Name)">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.Name))
                </ColumnOptions>
            </PropertyColumn>

            @if (SelectedReferenceCulture != null)
            {
                <TemplateColumn Filtered="IsColumnFiltered(SelectedReferenceCulture)" Width="400px" Title="@SelectedReferenceCulture" TGridItem="TranslationItem">
                    <ColumnOptions>
                        @RenderFilter(SelectedReferenceCulture)
                    </ColumnOptions>

                    <ChildContent>
                        <div class="TranslationValueColumn">
                            <div class="TranslationValue">
                                <FluentTextField 
                                    ValueChanged="@((v) => SetItemValue(context, SelectedReferenceCulture, v))" 
                                    Value="@context.GetCultureValue(SelectedReferenceCulture)" />
                            </div>

                            <div class="TranslationValueActions">
                                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => {})" />
                                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => {})" />
                            </div>
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
            
            @foreach (var cultureName in SelectedCultureNames)
            {
                <TemplateColumn Filtered="IsColumnFiltered(cultureName)" Width="400px" Title="@cultureName" TGridItem="TranslationItem">
                    <ColumnOptions>
                        @RenderFilter(cultureName)
                    </ColumnOptions>

                    <ChildContent>
                        <div class="TranslationValueColumn">
                            <div class="TranslationValue">
                                <FluentTextField 
                                    ValueChanged="@((v) => SetItemValue(context, cultureName, v))" 
                                    Value="@context.GetCultureValue(cultureName)" />
                            </div>

                            <div class="TranslationValueActions">
                                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => {})" />
                                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => {})" />
                            </div>
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
        </FluentDataGrid>
    </div>

    <div>
        <pre>
            @(JsonSerializer.Serialize(SelectedTranslations, new JsonSerializerOptions
 {
 WriteIndented = true
 }))
        </pre>
    </div>
</div>

@code {

    private RenderFragment RenderFilter(string columnName)
    {
        return @<text>
                    <div class="ColumnFilter">
                        <FluentTextField
                            Style="width: 100%;"
                            Placeholder="Filter"
                            Value="@Filters.GetValueOrDefault(columnName)"
                            ValueChanged="@((v) => SetColumnFilter(columnName, v))"
                        />
                        
                        <FluentButton
                            Class="Clear"
                            Appearance="Appearance.Stealth"
                            IconEnd="@(new IconFa())"
                            Title="Clear"
                            OnClick="@(() => SetColumnFilter(columnName, null))" 
                        />
                    </div>
        </text>;
    }
}
