@using System.Text.Json

<div class="TranslationsManagerView">
    <div class="Toolbar">
        <ExtAutocomplete
            AvailableOptions="AvailableCultureNames"
            SelectedOptions="@(SelectedReferenceCulture != null ? [SelectedReferenceCulture] : [])"
            SelectedOptionsChanged="SetSelectedReferenceCulture"
            MaximumSelectedOptions="1"
            Placeholder="Ref. lang"
            Width="150px"
        />
        
        <ExtAutocomplete
            AvailableOptions="AvailableCultureNames"
            SelectedOptions="@SelectedCultureNames"
            SelectedOptionsChanged="SelectedCulturesChanged"
            OptionDisabled="IsCultureSelectedAsReferenceCulture"
            Disabled="@(SelectedReferenceCulture == null)"
            Placeholder="Other languages"
        />
        
        <FluentSearch Style="width: 400px;" ValueChanged="SearchChanged"  Value=@Search Placeholder="Search (resource, name, values)" AutoComplete="off" />
        
        <FluentButton 
            Appearance="Appearance.Accent" 
            IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
            OnClick="@LoadDataAsync"
            Loading="LoadingInProgress"
            Disabled="AnyInProgress"
        >
            Load data from remote database
        </FluentButton>
    </div>

    <div class="Toolbar">
        <FluentButton
            Appearance="Appearance.Neutral"
            IconStart="@(new Icons.Regular.Size20.Delete())"
            Type="ButtonType.Button"
            OnClick="SaveDataAsync"
            Loading="SaveInProgress"
            Disabled="@(AnyInProgress || SelectedDeletedReversibleItemsCount > 0 || SelectedSoftDeletableItemsCount <= 0)"
        >
            Soft delete (@SelectedSoftDeletableItemsCount) records
        </FluentButton>
        
        <FluentButton
            Appearance="Appearance.Neutral"
            IconStart="@(new Icons.Regular.Size20.Delete())"
            Type="ButtonType.Button"
            OnClick="SaveDataAsync"
            Loading="SaveInProgress"
            Disabled="@(AnyInProgress || SelectedSoftDeletableItemsCount > 0 || SelectedDeletedReversibleItemsCount <= 0)"
        >
            Reverse (@SelectedDeletedReversibleItemsCount) deleted records 
        </FluentButton>
        
        <FluentButton
            Appearance="Appearance.Accent"
            IconStart="@(new Icons.Regular.Size20.SaveSync())"
            Type="ButtonType.Button"
            OnClick="SaveDataAsync"
            Loading="SaveInProgress"
            Disabled="AnyInProgress">
            Save changed records (@DirtyItemsCount) to the database
        </FluentButton>
    </div>
    
    <div class="Data">
        <FluentDataGrid ItemSize="45" Virtualize="true" Items="@QueryableTranslations" ShowHover="true" TGridItem="TranslationItem">
            <SelectColumn 
                TGridItem="TranslationItem" 
                SelectMode="DataGridSelectMode.Multiple" 
                SelectFromEntireRow="false" 
                SelectedItems="@SelectedTranslations"
                SelectedItemsChanged="SelectedTranslationsChanged"
            />

            <TemplateColumn Width="60px" Title="" TGridItem="TranslationItem">
                <ChildContent>
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenTranslationEditorPanelAsync(context))" /> 
                </ChildContent>
            </TemplateColumn>
            
            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.Id))" Width="200px" Property="@(p => p.Id)" Title="ID">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.Id))
                </ColumnOptions>    
            </PropertyColumn>

            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.ResourceName))" Sortable="true" Width="150px" Property="@(p => p.ResourceName)">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.ResourceName))
                </ColumnOptions>    
            </PropertyColumn>
            
            <PropertyColumn Filtered="IsColumnFiltered(nameof(TranslationItem.Name))" Sortable="true" Width="150px" Property="@(p => p.Name)">
                <ColumnOptions>
                    @RenderFilter(nameof(TranslationItem.Name))
                </ColumnOptions>
            </PropertyColumn>

            @if (SelectedReferenceCulture != null)
            {
                <TemplateColumn Filtered="IsColumnFiltered(SelectedReferenceCulture)" Width="400px" Title="@SelectedReferenceCulture" TGridItem="TranslationItem">
                    <ColumnOptions>
                        @RenderFilter(SelectedReferenceCulture)
                    </ColumnOptions>

                    <ChildContent>
                        <div class="TranslationValueColumn">
                            <div class="TranslationValue">
                                <FluentTextField 
                                    ValueChanged="@((v) => SetItemValue(context, SelectedReferenceCulture, v))" 
                                    Value="@context.GetCultureValue(SelectedReferenceCulture)" />
                            </div>
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
            
            @foreach (var cultureName in SelectedCultureNames)
            {
                <TemplateColumn Filtered="IsColumnFiltered(cultureName)" Width="400px" Title="@cultureName" TGridItem="TranslationItem">
                    <ColumnOptions>
                        @RenderFilter(cultureName)
                    </ColumnOptions>

                    <ChildContent>
                        <div class="TranslationValueColumn">
                            <div class="TranslationValue">
                                <FluentTextField 
                                    ValueChanged="@((v) => SetItemValue(context, cultureName, v))" 
                                    Value="@context.GetCultureValue(cultureName)" />
                            </div>

                            @* <div class="TranslationValueActions"> *@
                            @*     <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => {})" /> *@
                            @*     <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => {})" /> *@
                            @* </div> *@
                        </div>
                    </ChildContent>
                </TemplateColumn>
            }
        </FluentDataGrid>
    </div>
    
</div>

@code {

    private RenderFragment RenderFilter(string columnName)
    {
        return @<text>
                    <div class="ColumnFilter">
                        <FluentTextField
                            Style="width: 100%;"
                            Placeholder="Filter"
                            Value="@Filters.GetValueOrDefault(columnName)"
                            ValueChanged="@((v) => SetColumnFilter(columnName, v))"
                        />
                        
                        <FluentButton
                            Class="Clear"
                            Appearance="Appearance.Stealth"
                            IconEnd="@(new IconFa())"
                            Title="Clear"
                            OnClick="@(() => SetColumnFilter(columnName, null))" 
                        />
                    </div>
        </text>;
    }
}
